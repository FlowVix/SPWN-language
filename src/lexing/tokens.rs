#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum Token {
    Any,
    Int,
    HexInt,
    OctalInt,
    BinaryInt,
    SeximalInt,
    DozenalInt,
    GoldenFloat,
    Float,
    String,
    StringFlags,
    RawString,
    GroupID,
    ChannelID,
    BlockID,
    ItemID,
    ArbitraryGroupID,
    ArbitraryChannelID,
    ArbitraryBlockID,
    ArbitraryItemID,
    TypeIndicator,
    Mut,
    True,
    False,
    Obj,
    Trigger,
    If,
    Else,
    While,
    For,
    In,
    Try,
    Catch,
    Throw,
    Match,
    Return,
    Break,
    Continue,
    Type,
    Impl,
    Overload,
    Unary,
    Dbg,
    Private,
    Extract,
    Import,
    Dollar,
    Is,
    As,
    Plus,
    Minus,
    Mult,
    Div,
    Mod,
    Pow,
    PlusEq,
    MinusEq,
    MultEq,
    DivEq,
    ModEq,
    PowEq,
    BinAndEq,
    BinOrEq,
    ShiftLeftEq,
    ShiftRightEq,
    BinAnd,
    BinOr,
    ShiftLeft,
    ShiftRight,
    And,
    Or,
    Eol,
    LParen,
    RParen,
    LSqBracket,
    RSqBracket,
    LBracket,
    RBracket,
    TrigFnBracket,
    Comma,
    Eq,
    Neq,
    Gt,
    Gte,
    Lt,
    Lte,
    Assign,
    Colon,
    DoubleColon,
    Dot,
    Range,
    Spread,
    FatArrow,
    Arrow,
    QMark,
    ExclMark,
    Hashtag,
    Epsilon,
    Ident,
    Newline,
    Eof,
}

impl Token {
    pub fn to_str(self) -> &'static str {
        match self {
            Self::Mut => "mut",
            Self::Match => "match",
            Self::Int => "int",
            Self::HexInt => "hex int",
            Self::OctalInt => "octal int",
            Self::BinaryInt => "binary int",
            Self::SeximalInt => "seximal int",
            Self::DozenalInt => "dozenal int",
            Self::GoldenFloat => "base-φ int",
            Self::Float => "float",
            Self::String => "string",
            Self::StringFlags => "string flags",
            Self::RawString => "raw string",
            Self::GroupID => "group ID",
            Self::ChannelID => "channel ID",
            Self::BlockID => "block ID",
            Self::ItemID => "item ID",
            Self::ArbitraryGroupID => "group ID",
            Self::ArbitraryChannelID => "channel ID",
            Self::ArbitraryBlockID => "block ID",
            Self::ArbitraryItemID => "item ID",
            Self::TypeIndicator => "type indicator",
            Self::Ident => "identifier",
            Self::Eof => "end of file",
            Self::True => "true",
            Self::False => "false",
            Self::Obj => "obj",
            Self::Trigger => "trigger",
            Self::Plus => "+",
            Self::Minus => "-",
            Self::Mult => "*",
            Self::Div => "/",
            Self::Mod => "%",
            Self::Pow => "^",
            Self::PlusEq => "+=",
            Self::MinusEq => "-=",
            Self::MultEq => "*=",
            Self::DivEq => "/=",
            Self::ModEq => "%=",
            Self::PowEq => "^=",
            Self::Assign => "=",
            Self::LParen => "(",
            Self::RParen => ")",
            Self::LSqBracket => "[",
            Self::RSqBracket => "]",
            Self::LBracket => "{",
            Self::RBracket => "}",
            Self::TrigFnBracket => "!{",
            Self::Comma => ",",
            Self::Eol => ";",
            Self::If => "if",
            Self::Else => "else",
            Self::While => "while",
            Self::For => "for",
            Self::In => "in",
            Self::Try => "try",
            Self::Catch => "catch",
            Self::Return => "return",
            Self::Break => "break",
            Self::Continue => "continue",
            Self::Is => "is",
            Self::Eq => "==",
            Self::Neq => "!=",
            Self::Gt => ">",
            Self::Gte => ">=",
            Self::Lt => "<",
            Self::Lte => "<=",
            Self::Colon => ":",
            Self::DoubleColon => "::",
            Self::Dot => ".",
            Self::Range => "..",
            Self::FatArrow => "=>",
            Self::Arrow => "->",
            Self::QMark => "?",
            Self::ExclMark => "!",
            Self::Type => "type",
            Self::Impl => "impl",
            Self::Dollar => "$",
            Self::Import => "import",
            Self::As => "as",
            Self::BinAndEq => "&=",
            Self::BinOrEq => "|=",
            Self::BinAnd => "&",
            Self::BinOr => "|",
            Self::And => "&&",
            Self::Or => "||",
            Self::ShiftLeftEq => "<<=",
            Self::ShiftRightEq => ">>=",
            Self::ShiftLeft => "<<",
            Self::ShiftRight => ">>",
            Self::Hashtag => "#",
            Self::Extract => "extract",
            Self::Newline => "linebreak",
            Self::Spread => "...",
            Self::Dbg => "dbg",
            Self::Private => "private",
            Self::Any => "_",
            Self::Overload => "overload",
            Self::Unary => "unary",
            Self::Throw => "throw",
            Self::Epsilon => "ε",
        }
    }
}
