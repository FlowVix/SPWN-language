extract import "obj_ids.spwn"
extract import "easing.spwn"
extract import "control_flow.spwn"

impl @group {
    move: (
        self,
        x: @int,
        y: @int,
        duration: @float | @int = 0,
        easing: @easing = @easing::NONE,
        easing_rate: @float | @int = 2.0,
    ) {
        $.add(trigger {
            OBJ_ID: @obj_id::triggers.MOVE,
            TARGET: self,
            MOVE_X: x * 3, // in move triggers, 1 step is 1/3 of a whole block
            MOVE_Y: y * 3,
            DURATION: duration,
            EASING: easing.id,
            EASING_RATE: easing_rate,
        })
        
        wait(duration)
    },

    stop: (self) {
        $.add(trigger {
            OBJ_ID: @obj_id::triggers.STOP,
            TARGET: self,
        })
    },

    alpha: (
        self,
        opacity: @float & >= 0.0 & <= 1.0 = 1.0,
        duration: @int | @float = 0
    ) {
        $.add(trigger {
            OBJ_ID: @obj_id::triggers.ALPHA,
            TARGET: self,
            OPACITY: opacity,
            DURATION: duration,
        })
        wait(duration)
    },

    toggle_off: (self) {
        $.add(trigger {
            OBJ_ID: @obj_id::triggers.TOGGLE,
            TARGET: self,
            ACTIVATE_GROUP: false,
        })
    },

    toggle_on: (self) {
        $.add(trigger {
            OBJ_ID: @obj_id::triggers.TOGGLE,
            TARGET: self,
            ACTIVATE_GROUP: true,
        })
    },

    #[doc(u"
        Implementation of the rotate trigger.

        # Args
        `lock_object_rotation`: Only rotate positions of the objects, not the textures.
        
        # Example
        ```spwn
        center = 3g
        10g.rotate(center, 360, 2, easing = @easing::EASE_IN_OUT)
        ```
    ")]
    rotate: (
        self,
        center: @group,
        degrees: @int,
        duration: @float | @int = 0,
        easing: @easing = @easing::NONE,
        easing_rate: @float = 2.0,
        lock_object_rotation: @bool = false
    ) {
        $.add(trigger {
            OBJ_ID: @obj_id::triggers.ROTATE,
            TARGET: self,
            CENTER: center,
            ROTATE_DEGREES: degrees,
            DURATION: duration,
            EASING: easing.id,
            EASING_RATE: easing_rate,
            LOCK_OBJECT_ROTATION: lock_object_rotation
        })
        wait(duration)
    },

    #[doc(u"
        Implementation of the follow trigger.

        # Example
        ```spwn
        10g.follow(11g)
        ```
    ")]
    follow: (
        self,
        other: @group,
        x_mod: @float | @int = 1,
        y_mod: @float | @int = 1,
        duration: @float | @int = 999
    ) {
        $.add(trigger {
            OBJ_ID: @obj_id::triggers.FOLLOW,
            X_MOD: x_mod,
            Y_MOD: y_mod,
            DURATION: duration,
            TARGET: self,
            FOLLOW: other,
        })
        //wouldnt make any sense to wait out the duration here
    },

    #[doc(u"
        Implementation of the follow player Y trigger.

        # Example
        ```spwn
        10g.follow_player_y(delay = 0.5)
        ```
    ")]
    follow_player_y:
    (
        self,
        speed: @float | @int = 1,
        delay: @float | @int = 0,
        offset: @float | @int = 0,
        max_speed: @float | @int = 0,
        duration: @float | @int = 999
    ) {
        $.add(trigger {
            OBJ_ID: @obj_id::triggers.FOLLOW_PLAYER_Y,
            SPEED : speed,
            DELAY : delay,
            Y_OFFSET : offset,
            MAX_SPEED : max_speed,
            TARGET: self,
            DURATION: duration,
        })
        //wouldnt make any sense to wait out the duration here
    },

    #[doc(u"
        Implementation of the 'Move target' feature of the move trigger. Remember that both groups can only contain one object.
        
        # Example
        ```spwn
        10g.move_to(20g)
        ```
    ")]
    move_to: (
        self,
        target: @group,
        duration: @float | @int = 0,
        x_only: @bool = false,
        y_only: @bool = false,
        easing: @easing = @easing::NONE,
        easing_rate: @float = 2.0,
    ) {
        $.add(trigger {
            OBJ_ID: @obj_id::triggers.MOVE,
            TARGET: self,
            USE_TARGET: true,
            
            TARGET_POS_AXES: match [x_only, y_only] {
                [==true, ==true] => 0,
                [==true, ==false] => 1,
                [==false, ==true] => 2,
                [==false, ==false] => 0,
            },
            TARGET_POS: target,

            DURATION: duration,
            EASING: easing.id,
            EASING_RATE: easing_rate,
        })
        wait(duration)
    },
    
    // #[doc("
    //     Moves group to a specific coordinate.

    //     # Example
    //     ```spwn
    //     10g.move_to_xy(300, 300)
    //     10g.move_to_xy(x = 300) // does not move on the y axis
    //     10g.move_to_xy(y = 300) // does not move on the x axis
    //     ```
    // ")]
    // move_to_coords: (
    //     self,
    //     coords:
    //         { x: @int | @float, y: @int | @float }
    //         | { x: @int | @float }
    //         | { y: @int | @float },
    //     duration: @int | @float = 0,
    //     easing: @easing = @easing::NONE,
    //     easing_rate: @int = 2,
    // ) {

    //     [x, y] = match coords {
    //         {x, y} => [x?, y?],
    //         {x} => [x?, ?],
    //         {y} => [?, x?],
    //     };

    //     $.add(
    //         obj {
    //             OBJ_ID: 1765, // small `x`
    //             X: x.unwrap_or(0),
    //             Y: y.unwrap_or(0),
    //             GROUPS: target,
    //         }, 
    //         ignore_context = true
    //     );
        
    //     $.add(
    //         obj {
    //             OBJ_ID: @obj_id::triggers.ALPHA,
    //             X: 0,
    //             Y: 75 * 30,
    //         }, 
    //         ignore_context = true
    //     );

    //     self.move_to(
    //         target, 
    //         duration, 
    //         x.is_some(),
    //         x.is_some(),
    //         easing, 
    //         easing_rate
    //     );
    // },

    #[doc(u"
        Implementation of the pulse trigger for groups.

        # Example
        ```spwn
        10g.pulse(rgb8(255, 0, 0), fade_out = 0.5)
        ```
    ")]
    pulse: (
        self,
        c: @chroma,
        fade_in: @float | @int = 0,
        hold: @float | @int = 0,
        fade_out: @float | @int = 0,
        exclusive: @bool = false,
    ) {
        $.add(trigger {
            OBJ_ID: @obj_id::triggers.PULSE,
            TRIGGER_RED: c.r8(),
            TRIGGER_GREEN: c.g8(),
            TRIGGER_BLUE: c.b8(),
            EXCLUSIVE: exclusive,
            FADE_IN: fade_in,
            HOLD: hold,
            FADE_OUT: fade_out,
            TARGET: self,
            PULSE_HSV: false,
            TARGET_TYPE: 1,
        })
        wait(fade_in + hold + fade_out)
    },

    #[doc(u"
        Implementation of the pulse trigger for groups with hsv..10g
        
        # Example
        ```spwn
        10g.pulse_hsv(180, 1, 1, fade_out = 0.5)
        ```
    ")]
    pulse_hsv: 
    (
        self,
        h: @int,
        s: @float,
        b: @float,
        s_checked: @bool = false,
        b_checked: @bool = false,
        fade_in: @float | @int = 0,
        hold: @float | @int = 0,
        fade_out: @float | @int = 0,
        exclusive: @bool = false,
    ) {
        $.add(trigger {
            OBJ_ID: @obj_id::triggers.PULSE,
            COPIED_COLOR_HVS: f"{h}a{s}a{b}a{s_checked as @int}a{b_checked as @int}",
            EXCLUSIVE: exclusive,
            FADE_IN: fade_in,
            HOLD: hold,
            FADE_OUT: fade_out,
            TARGET: self,
            PULSE_HSV: true,
            TARGET_TYPE: 1,
        })
        wait(fade_in + hold + fade_out)
    },
}