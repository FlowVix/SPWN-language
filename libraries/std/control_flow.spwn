extract import "obj_ids.spwn"
extract import "counter.spwn"
extract import "item.spwn"

wait = (duration: @int | @float | @epsilon) {
    if duration is @epsilon || duration > 0.0 {
        // ðŸ˜€
        $.add(trigger {
            OBJ_ID: @obj_id::triggers.SPAWN,
            SPAWN_DURATION: duration,
            TARGET: !{
                -> return
            },
        }, true)
    }
}

call_with_delay = (
	time: @float | @int | @epsilon,
	function: @trigger_function | @group
) {
	$.add(trigger {
		OBJ_ID: @obj_id::triggers.SPAWN,
		SPAWN_DURATION: time,
		TARGET: function,
	}, true)
}

while_loop = (
    expr: () -> @bool,
    code: () -> (),
) {
    func = !{
        if expr() {
            code()
            call_with_delay(Îµ, func)
        } else {
            -> return
        }
    }

    func!
}

for_loop = (
    range: @range,
    code: @counter -> (),
) {
    mut i = @counter::new()
    i += range.start

    func = !{
        code(i)
        wait(Îµ)
        i.add_const(range.step)
        if range.step > 0 {
            i.item.if_is(@comparison::SMALLER_THAN, range.end, func)
            i.item.if_is(@comparison::LARGER_THAN, range.end - 1, !{
                -> return
            })
        } else {
            i.item.if_is(@comparison::LARGER_THAN, range.end, func)
            i.item.if_is(@comparison::SMALLER_THAN, range.end + 1, !{
                -> return
            })
        }
    }

    func!

};

return {
    wait,
    call_with_delay,
    while_loop,
    for_loop
}