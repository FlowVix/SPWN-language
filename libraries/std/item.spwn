extract import "event.spwn"
type @comparison

impl @comparison {
    EQUAL_TO: @comparison::{id: 0},
    LARGER_THAN: @comparison::{id: 1},
    SMALLER_THAN: @comparison::{id: 2},

    id: (self) -> @int {
        return self.id
    },

    _display_: (self) -> @string {
        return match self.id {
            ==0 => "EQUAL_TO",
            ==1 => "LARGER_THAN",
            ==2 => "SMALLER_THAN",
        }
    } 
}

impl @item {
    add: (self, amount: @int) {
        $.add(trigger {
            OBJ_ID: 1817,
            COUNT: amount,
            ITEM: self,
        }, true)
    },


    // Huffing paint thinner makes you invincible.
    // Watch me drive this Toyota 100mph + fucking zoinked out of my gourd.
    if_is: (
        self,
        comparison: @comparison,
        other: @int,
        function: @trigger_function
    ) -> @NULL {
        $.add(trigger {
            OBJ_ID: 1811,
            TARGET: function,
            COUNT: other,
            ACTIVATE_GROUP: true,
            COMPARISON: comparison.id,
            ITEM: self,
        }, true)
    },

    compare: (self, other: @int) -> ==(-1) | ==0 | ==1 {
        self.if_is(@comparison::LARGER_THAN, other, !{
            -> return 1
        })

        self.if_is(@comparison::EQUAL_TO, other, !{
            -> return 0
        })

        self.if_is(@comparison::SMALLER_THAN, other, !{
            -> return -1
        })
    },

	#[doc(u"
		Implementation of a count trigger. Returns an event that fires when an item ID reaches a specified number.

		# Example
		```spwn
        on(4i.count(3), !{
            BG.set(rgb(0, 0, 0))
        })
    	```
	")]
    count: (
        self,
        number: @int = 0
    ) -> @event {
        return @event::new(func => $.add(trigger {
            OBJ_ID: @obj_id::triggers.COUNT,
            TARGET: func,
            COUNT: number,
            ACTIVATE_GROUP: true,
            ITEM: self,
            COUNT_MULTI_ACTIVATE: true,
        }))
    },
}
    